---
title: "Essay on Shiny Apps"
format: html
---

## üí° About Shiny App

Shiny is an R package that makes it easy to build interactive web applications directly from R. It allows you to combine R's powerful data analysis capabilities with interactive UI elements like sliders, dropdowns, and plots ‚Äî all from a browser.

Shiny apps are ideal for dashboards, data exploration tools, simulations, and sharing insights with non-technical users.

Using Shiny, you can create robust browser-based applications from your R code. It enables you to create analysis, exploration, and presentation tools with little to no front-end scripting.

------------------------------------------------------------------------

## ‚öôÔ∏è How Does It Work?

A Shiny app typically has two main components:

1.  **UI (User Interface)**: Defines how the app looks ‚Äî layout, widgets, and outputs.
2.  **Server**: Contains the logic that runs in response to user input ‚Äî filtering data, generating plots, etc.

Here‚Äôs a simple example:

```{r}
library(shiny)

ui <- fluidPage(
  titlePanel("Hello Shiny!"),
  sidebarLayout(
    sidebarPanel(
      sliderInput("obs", "Number of observations:", min = 1, max = 1000, value = 500)
    ),
    mainPanel(
      plotOutput("distPlot")
    )
  )
)

server <- function(input, output) {
  output$distPlot <- renderPlot({
    hist(rnorm(input$obs))
  })
}

shinyApp(ui = ui, server = server)
```

## **When Is Shiny Appropriate?**

-   You're building tools for internal use (e.g., dashboards)

-   You want to enable user-driven exploration of data

-   You wish to communicate insights interactively without requiring people to execute R code.

You're building tools for internal use (e.g., dashboards)\
You want to enable user-driven exploration of data\
You wish to communicate insights interactively without requiring people to execute R code.

## **Benefit & drawback of Shiny**

***Benefit***

-   Dynamic and interactive

-   Excellent for data-driven visual storytelling

-   Simple to set up using a Shiny Server or shinyapps.io

***Drawback***

-   If you are unfamiliar with reactive programming, the learning curve is steeper.

-   May require optimization for large datasets

Example of using Shiny app for cosmetics dataset

```{r}
library(shiny)
library(ggplot2)
library(dplyr)
cosmetics <- data.frame(
  Product = c("Glow Serum", "Matte Lipstick", "Hydrating Cream", "Eyeliner", "Blush"),
  Price = c(25, 15, 30, 12, 20),
  Rating = c(4.8, 4.3, 4.7, 4.1, 4.5),
  Category = c("Serum", "Makeup", "Skincare", "Makeup", "Makeup")
)

ui <- fluidPage(
  titlePanel("Cosmetics: Price vs. Rating"),
  sidebarLayout(
    sidebarPanel(
      selectInput("category", "Select Category:", choices = unique(cosmetics$Category))
    ),
    mainPanel(
      plotOutput("ratingPlot")
    )
  )
)

server <- function(input, output) {
  output$ratingPlot <- renderPlot({
    filtered <- cosmetics %>% filter(Category == input$category)
    ggplot(filtered, aes(x = Price, y = Rating, label = Product)) +
      geom_point(size = 4, color = "#E91E63") +
      geom_text(vjust = -1) +
      theme_minimal() +
      labs(title = paste("Price vs Rating for", input$category),
           x = "Price ($)", y = "Rating (out of 5)")
  })
}

shinyApp(ui = ui, server = server)
```

This interactive Shiny app allows users to explore how the ***Price*** and ***Rating*** of cosmetics vary across different product categories.
